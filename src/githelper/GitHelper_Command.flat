package githelper

import flat/log/Logger
import flat/io/File
import flat/fucli/FuCli
import flat/fucli/CliArg
import flat/github/GitHub

class {
    static Logger log = Logger(GitHelper.class)

    static CliArg organizationArg = CliArg(
        name: "organization",
        description: "The Organization to run the command against",
        count: 1,
        wildcard: true
    )

    static CliArg reenableInactiveWorkflowsCommand = CliArg("reenable-inactive-workflows", args: [organizationArg])

    static CliArg rerunFailedActionsCommand = CliArg("rerun-failed-actions", args: [organizationArg])

    static CliArg updateRemoteCommand = CliArg("update-remote", args: [organizationArg])

    static CliArg pullCommand = CliArg("pull", args: [organizationArg])

    static CliArg cloneCommand = CliArg("clone", args: [organizationArg])

    static CliArg statusCommand = CliArg("status", args: [organizationArg])

    static CliArg execCommandArgs = CliArg(
        name: "execCommands",
        description: "The command to run",
        minCount: 1,
        wildcard: true
    )

    static CliArg execCommand = CliArg("exec", args: [organizationArg, execCommandArgs])

    static CliArg directoryArg = CliArg("--directory", ["-d"], count: 1)

    static CliArg tokenArg = CliArg(
        name: "token",
        description: "GitHub PAT token to use with the request",
        count: 1,
        wildcard: true
    )

    static CliArg tokenParam = CliArg("--token", ["-t"], args: [tokenArg])

    static CliArg syncArg = CliArg("--sync")

    static CliArg sshArg = CliArg("--ssh")

    public static async main(String[] args) {
        let cli = FuCli(
            "git-helper",
            [
                reenableInactiveWorkflowsCommand,
                rerunFailedActionsCommand,
                updateRemoteCommand,
                pullCommand,
                cloneCommand,
                statusCommand,
                execCommand,
                directoryArg,
                tokenParam,
                syncArg,
                sshArg
            ]
        ):parse(args.skip(1))

        let directory = directoryArg.enabled ?
            File(directoryArg.value) :
            File(System.workingDirectory)

        let commands = cli.args.filter({ _.enabled })

        for (command in commands) {
            log.debug("Running command \"#{command}\"")

            match (command) {
                reenableInactiveWorkflowsCommand => reenableInactiveWorkflows(directory)
                rerunFailedActionsCommand => rerunFailedActions(directory)
                updateRemoteCommand => updateRemote(directory)
                pullCommand => pull(directory)
                cloneCommand => clone(directory)
                statusCommand => status(directory)
                execCommand => exec(directory)
            }
        }
    }

    static async reenableInactiveWorkflows(File directory) {
        GitHelper.reenableInactiveWorkflows(
            organizationArg.value,
            getRepoDirectories(organizationArg.value, directory),
            sync: syncArg.enabled,
            token: tokenArg.value
        )
    }

    static async rerunFailedActions(File directory) {
        GitHelper.rerunFailedActions(
            organizationArg.value,
            getRepoDirectories(organizationArg.value, directory),
            sync: syncArg.enabled,
            token: tokenArg.value
        )
    }

    static async updateRemote(File directory) {
        GitHelper.updateRemote(
            organizationArg.value,
            getRepoDirectories(organizationArg.value, directory),
            sync: syncArg.enabled,
            ssh: sshArg.enabled
        )
    }

    static async pull(File directory) {
        GitHelper.pullAll(
            getRepoDirectories(organizationArg.value, directory).filter({ _.exists }),
            sync: syncArg.enabled
        )
    }

    static async clone(File directory) {
        GitHelper.cloneAll(
            organizationArg.value,
            getRepoDirectories(organizationArg.value, directory),
            ssh: sshArg.enabled,
            sync: syncArg.enabled
        )
    }

    static async status(File directory) {
        GitHelper.status(
            organizationArg.value,
            getRepoDirectories(organizationArg.value, directory),
            sync: syncArg.enabled
        )
    }

    static async exec(File directory) {
        GitHelper.execAll(
            execCommandArgs.values,
            getRepoDirectories(organizationArg.value, directory).filter({ _.exists }),
            sync: syncArg.enabled
        )
    }

    static async getRepoDirectories(String organization, File directory) =>
        GitHub.getOrganizationRepos(organization, token: tokenArg.value)
            .filter({ _.visibility == "public" })
            .map({ _.name })
            .map({ File(directory, _) })
}
