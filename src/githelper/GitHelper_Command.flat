package githelper

import flat/log/Logger
import flat/io/File
import flat/fucli/FuCli
import flat/fucli/CliArg
import flat/github/GitHub

class {
  static Logger log = Logger(GitHelper.class)

  static CliArg pullCommand = CliArg("pull", count: 1)
  static CliArg cloneCommand = CliArg("clone", count: 1)
  static CliArg execCommand = CliArg("exec", minCount: 2)
  static CliArg directoryArg = CliArg("--directory", ["-d"], count: 1)
  static CliArg syncArg = CliArg("--sync")

  public static async main(String[] args) {
    let cli = FuCli([
      pullCommand,
      cloneCommand,
      execCommand,
      directoryArg,
      syncArg
    ]):parse(args.skip(1))

    let directory = directoryArg.enabled ?
      File(directoryArg.value) :
      File(System.workingDirectory)

    let commands = cli.args.filter({ _.enabled })

    for (command in commands) {
      log.debug("Running command \"#command\"")

      match (command) {
        pullCommand => pull(directory)
        cloneCommand => clone(directory)
        execCommand => exec(directory)
      }
    }
  }

  static async pull(File directory) {
    GitHelper.pullAll(
      getRepoDirectories(pullCommand.value, directory).filter({ _.exists }),
      sync: syncArg.enabled
    )
  }

  static async clone(File directory) {
    GitHelper.cloneAll(
      cloneCommand.value,
      getRepoDirectories(cloneCommand.value, directory),
      sync: syncArg.enabled
    )
  }

  static async exec(File directory) {
    GitHelper.execAll(
      execCommand.values.skip(1),
      getRepoDirectories(execCommand.values.first, directory).filter({ _.exists }),
      sync: syncArg.enabled
    )
  }

  static async getRepoDirectories(String organization, File directory) =>
    GitHub.getOrganizationRepos(organization)
      .map({ _.name })
      .map({ File(directory, _) })
}
