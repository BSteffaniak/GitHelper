package githelper

import flat/log/Logger
import flatlang/io/File
import flatlang/fucli/FuCli
import flatlang/fucli/CliArg
import flat/github/GitHub

class {
  let static Logger log = Logger(GitHelper.class)

  let static CliArg pullCommand = CliArg("pull", count: 1)
  let static CliArg cloneCommand = CliArg("clone", count: 1)
  let static CliArg directoryArg = CliArg("--directory", ["-d"], count: 1)
  let static CliArg syncArg = CliArg("--sync")

  public static async main(String[] args) {
    let cli = FuCli([
      pullCommand,
      cloneCommand,
      directoryArg,
      syncArg
    ]):parse(args.skip(1))

    // external {
    //   console.log(#{repos.data}[0]);
    // }

    // log.info(repos)

    // let repoDirectories = Array<File>():addAll([
    //   File(System.homeDirectory + "/GitHub/FlatWorkspace/Server"),
    //   File(System.homeDirectory + "/GitHub/FlatWorkspace/Logger")
    // ])

    let directory = directoryArg.enabled ?
      File(directoryArg.value) :
      File(System.workingDirectory)

    let commands = cli.args.filter({ _.enabled })

    for (command in commands) {
      log.debug("Running command \"#command\"")

      match (command) {
        pullCommand => pull(directory)
        cloneCommand => clone(directory)
      }
    }
  }

  static async pull(File directory) {
    GitHelper.pullAll(
      getRepoDirectories(pullCommand.value, directory).filter({ _.exists }),
      sync: syncArg.enabled
    )
  }

  static async clone(File directory) {
    GitHelper.cloneAll(
      cloneCommand.value,
      getRepoDirectories(cloneCommand.value, directory),
      sync: syncArg.enabled
    )
  }

  static async getRepoDirectories(String organization, File directory) =>
    GitHub.getOrganizationRepos(organization)
      .map({ _.name })
      .map({ File(directory, _) })
}
